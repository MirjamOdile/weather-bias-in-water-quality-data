version
library(tidyverse)
library(Hmisc)
library(lubridate)
library(naniar)
library(psych)
setwd('/home/mirjam/Desktop/JamesArticle/Data/Great Pond Data/Colby Data')
getwd()
list.files()
data1_16 <- read.csv("GPDEP1_2016_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE )[2]
data2_16 <- read.csv("GPDEP2_2016_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE )[2]
data1_17 <- read.csv("GPDEP1_2017_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE )[2]
data2_17 <- read.csv("GPDEP2_2017_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE )[2]
data1_18 <- read.csv("GPDEP1_2018_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE )[2]
data2_18 <- read.csv("GPDEP2_2018_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE )[2]
data1_19 <- read.csv("GPDEP1_2019_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE )[2]
data2_19 <- read.csv("GPDEP2_2019_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE )[2]
data <- rbind(data1_16, data2_16, data1_17, data2_17,
data1_18, data2_18, data1_19, data2_19)
names(data) <- "Timestamp"
# Check result
head(data)
# Drop individual datasets
rm(data1_16, data2_16, data1_17, data2_17,
data1_18, data2_18, data1_19, data2_19)
# Extract date-time
data$Datetime <- as_datetime(data$Timestamp, format ="%Y-%m-%d %H:%M:%S")
data$Datetime[is.na(data$Datetime)] = as_datetime(data$Timestamp[is.na(data$Datetime)],
format = "%d/%m/%Y %H:%M:%S")
data$Datetime[is.na(data$Datetime)] = as_datetime(data$Timestamp[is.na(data$Datetime)],
format = "%d/%m/%Y %H:%M")
data$Datetime[is.na(data$Datetime)] = as_datetime(data$Timestamp[is.na(data$Datetime)],
format = "%m/%d/%Y %H:%M:%S")
data$Datetime[is.na(data$Datetime)] = as_datetime(data$Timestamp[is.na(data$Datetime)],
format = "%m/%d/%Y %H:%M")
summary(data$Datetime)
# Extract date
data$Date <- date(data$Datetime)
# Extract time
data$Time <- hms::as_hms(data$Datetime)
# Inspect data
head(data)
summary(data)
plot(data$Date, hour(data$Time))
# Save the cleaned data
write.csv(data,
'/home/mirjam/Desktop/JamesArticle/Data/GPDEP_2016-2019_cleaned.csv',
row.names=FALSE)
data_per_day <-
data %>% group_by(Date) %>%
summarise(Starttime = hms::as_hms(min(Time)),
Endtime = hms::as_hms(max(Time)))
nrow(data_per_day)
# Save the aggregated data
write.csv(data_per_day,
'/home/mirjam/Desktop/JamesArticle/Data/GPDEP_2016-2019_aggregated.csv',
row.names=FALSE)
# Investigate result
plot(data_per_day$Date, hour(data_per_day$Starttime))
data_per_day %>% group_by(year(Date)) %>%
summarise(samples = n())
# Date range: 2016-07-26 to 2019-11-08
data_per_day_subset <- subset(data_per_day, data_per_day$Date >= '2016-07-26')
nrow(data_per_day_subset)
# Investigate result
plot(data_per_day_subset$Date, hour(data_per_day_subset$Starttime))
data_per_day_subset %>% group_by(year(Date)) %>%
summarise(samples = n())
library(tidyverse)
library(Hmisc)
library(lubridate)
library(naniar)
library(psych)
library(readr)
setwd('/home/mirjam/Desktop/JamesArticle/Data/Great Pond Data/Colby Data')
getwd()
list.files()
manual1_16 <- read.csv("GPDEP1_2016_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE)[c(2,4,5,6,15)]
manual2_16 <- read.csv("GPDEP2_2016_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE)[c(2,4,5,6,15)]
manual1_17 <- read.csv("GPDEP1_2017_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE)[c(2,4,5,6,15)]
manual2_17 <- read.csv("GPDEP2_2017_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE)[c(2,4,5,6,15)]
manual1_18 <- read.csv("GPDEP1_2018_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE)[c(2,4,5,6,15)]
manual2_18 <- read.csv("GPDEP2_2018_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE)[c(2,4,5,6,15)]
manual1_19 <- read.csv("GPDEP1_2019_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE)[c(2,4,5,6,15)]
manual2_19 <- read.csv("GPDEP2_2019_InSitu.csv", skip=2,
header=FALSE, stringsAsFactors = FALSE)[c(2,4,5,6,15)]
manual <- rbind(manual1_16, manual2_16, manual1_17, manual2_17,
manual1_18, manual2_18, manual1_19, manual2_19)
names(manual) <- c("Timestamp", "Temp", "RDO", "RDO.Sat", "Depth")
# Check result
head(manual)
# Drop individual manualsets
rm(manual1_16, manual2_16, manual1_17, manual2_17,
manual1_18, manual2_18, manual1_19, manual2_19)
# Extract date-time
manual$Datetime <- as_datetime(manual$Timestamp, format ="%Y-%m-%d %H:%M:%S")
manual$Datetime[is.na(manual$Datetime)] = as_datetime(manual$Timestamp[is.na(manual$Datetime)],
format = "%d/%m/%Y %H:%M:%S")
manual$Datetime[is.na(manual$Datetime)] = as_datetime(manual$Timestamp[is.na(manual$Datetime)],
format = "%d/%m/%Y %H:%M")
manual$Datetime[is.na(manual$Datetime)] = as_datetime(manual$Timestamp[is.na(manual$Datetime)],
format = "%m/%d/%Y %H:%M:%S")
manual$Datetime[is.na(manual$Datetime)] = as_datetime(manual$Timestamp[is.na(manual$Datetime)],
format = "%m/%d/%Y %H:%M")
summary(manual$Datetime)
# Extract date
manual$Date <- date(manual$Datetime)
# Extract time
manual$Time <- hms::as_hms(manual$Datetime)
# Inspect manual
head(manual)
summary(manual)
plot(manual$Date, hour(manual$Time))
# Order the manual
manual <- manual[order(manual$Datetime),]
# Reset the index
rownames(manual) <- NULL
manual$id <- as.numeric(rownames(manual))
setwd('/home/mirjam/Desktop/JamesArticle/Data/Great Pond Data/Goldie')
getwd()
list.files()
goldie2016 <- read.csv("GoldieClean2016.csv", skip=0,
header=TRUE, stringsAsFactors = FALSE)
buoy.variable.names <- names(goldie2016)
goldie2016 <- read.csv("GoldieClean2016.csv", skip=2,
header=TRUE, stringsAsFactors = FALSE)
names(goldie2016) <- buoy.variable.names
goldie2017 <- read.csv("GoldieClean2017.csv", skip=2,
header=TRUE, stringsAsFactors = FALSE)
names(goldie2017) <- buoy.variable.names
goldie2018 <- read.csv("GoldieClean2018.csv", skip=2,
header=TRUE, stringsAsFactors = FALSE)
names(goldie2018) <- buoy.variable.names
goldie2019 <- read.csv("GoldieClean2019.csv", skip=2,
header=TRUE, stringsAsFactors = FALSE)
names(goldie2019) <- buoy.variable.names
buoy <- rbind(goldie2016, goldie2017, goldie2018, goldie2019)
# Check result
head(buoy)
# Drop individual manualsets
rm(goldie2016, goldie2017, goldie2018, goldie2019)
# Extract date-time
buoy$Datetime <- as_datetime(buoy$Date.Time, format ="%Y-%m-%d %H:%M:%S")
summary(buoy$Datetime)
# Extract date
buoy$Date <- date(buoy$Datetime)
# Extract time
buoy$Time <- hms::as_hms(buoy$Datetime)
# Inspect buoy data
head(buoy)
summary(buoy)
plot(buoy$Date, hour(buoy$Time))
# # Mark NAs
# buoy <- replace_with_na_at(buoy,
#                    .vars = c("X1m.T", "X3m.T", "X5m.T", "X7m.T", "X9m.T",
#                              "X11m.T", "X13m.T", "X15m.T", "X17m.T", "X19m.T"),
#                     condition = ~.x ==  -100000.00)
# buoy <- replace_with_na_at(buoy,
#                                 .vars = c("X1m.T", "X3m.T", "X5m.T", "X7m.T", "X9m.T",
#                                           "X11m.T", "X13m.T", "X15m.T", "X17m.T", "X19m.T"),
#                                 condition = ~.x ==  -273.14)
buoy <- replace_with_na_at(buoy,
.vars = c("X1m.T", "X3m.T", "X5m.T", "X7m.T", "X9m.T",
"X11m.T", "X13m.T", "X15m.T", "X17m.T", "X19m.T"),
condition = ~.x <= -100)
# Pick all manual measurements from the months covered by aytomatic measurements
final.manual <- manual[month(manual$Datetime) > 3 & month(manual$Datetime) < 11,]
# Gather automatic measurements
final.automatic <- gather(buoy[c(21, 11:20)],  "Depth", "Temp", 2:11)
final.automatic <- drop_na(final.automatic)
final.automatic$Depth <- parse_number(final.automatic$Depth)
final.automatic$Date <- as.Date(final.automatic$Datetime)
# Investigate data
plot(final.manual$Datetime, final.manual$Temp)
plot(final.automatic$Datetime, final.automatic$Temp)
# Remove outlier dates
outlier.dates <- dput(unique(final.automatic$Date[final.automatic$Temp>30]))
final.automatic <- final.automatic[!(final.automatic$Date %in% outlier.dates),]
plot(final.automatic$Datetime, final.automatic$Temp)
summary(final.automatic$Temp[year(final.automatic$Datetime) == 2016])
summary(final.automatic$Temp[year(final.automatic$Datetime) == 2017])
summary(final.automatic$Temp[year(final.automatic$Datetime) == 2018])
summary(final.automatic$Temp[year(final.automatic$Datetime) == 2019])
summary(manual$Temp)
summary(final.automatic$Temp)
unique(month(final.manual$Datetime))
unique(month(final.automatic$Datetime))
# T-test for all depths
t.test(final.manual$Temp, final.automatic$Temp)
mean(final.manual$Temp);mean(final.automatic$Temp, na.rm = TRUE)
mean(final.manual$Temp) - mean(final.automatic$Temp, na.rm = TRUE)
# Depth 1-19
final.manual.1to19 <- final.manual[final.manual$Depth>=1 & final.manual$Depth<=19,]
# T-test for 1-19
t.test(final.manual.1to19$Temp, final.automatic$Temp)
mean(final.manual.1to19$Temp);mean(final.automatic$Temp, na.rm = TRUE)
mean(final.manual.1to19$Temp) - mean(final.automatic$Temp, na.rm = TRUE)
# Depth 1-7
final.manual.1to7 <- final.manual[final.manual$Depth>=1 & final.manual$Depth <=7,]
final.automatic.1to7 <- final.automatic[final.automatic$Depth<=7,]
# T-test for 1-7
t.test(final.manual.1to7$Temp, final.automatic.1to7$Temp)
mean(final.manual.1to7$Temp); mean(final.automatic.1to7$Temp, na.rm = TRUE)
mean(final.manual.1to7$Temp) - mean(final.automatic.1to7$Temp, na.rm = TRUE)
# Depth 9-19
final.manual.9to19 <- final.manual[final.manual$Depth>=9 & final.manual$Depth<=19,]
final.automatic.9to19 <- final.automatic[final.automatic$Depth>=9,]
# T-test for 9-19
t.test(final.manual.9to19$Temp, final.automatic.9to19$Temp)
mean(final.manual.9to19$Temp); mean(final.automatic.9to19$Temp, na.rm = TRUE)
mean(final.manual.9to19$Temp) - mean(final.automatic.9to19$Temp, na.rm = TRUE)
# T-test for 9-19 (bias corrected)
t.test(final.manual.9to19$Temp-0.86, final.automatic.9to19$Temp)
mean(final.manual.9to19$Temp-0.86); mean(final.automatic.9to19$Temp, na.rm = TRUE)
mean(final.manual.9to19$Temp-0.86) - mean(final.automatic.9to19$Temp, na.rm = TRUE)
closest <- function(variable,value){
variable[which(abs(variable-value)==min(abs(variable-value)))]
}
closest.other <-  function(other.variable, variable, value){
other.variable[which(abs(variable-value)==min(abs(variable-value)))]
}
matched <- manual %>% group_by(Date) %>%
summarise(### Extract manual samples at depths clostest to the buoy measurements ###
# Match depth (max 20cm deviance)
depth.01 = ifelse(abs(closest(Depth,  1)[1] -  1) < 0.2, closest(Depth,  1)[1], NA),
depth.03 = ifelse(abs(closest(Depth,  3)[1] -  3) < 0.2, closest(Depth,  3)[1], NA),
depth.05 = ifelse(abs(closest(Depth,  5)[1] -  5) < 0.2, closest(Depth,  5)[1], NA),
depth.07 = ifelse(abs(closest(Depth,  7)[1] -  7) < 0.2, closest(Depth,  7)[1], NA),
depth.09 = ifelse(abs(closest(Depth,  9)[1] -  9) < 0.2, closest(Depth,  9)[1], NA),
depth.11 = ifelse(abs(closest(Depth, 11)[1] - 11) < 0.2, closest(Depth, 11)[1], NA),
depth.13 = ifelse(abs(closest(Depth, 13)[1] - 13) < 0.2, closest(Depth, 13)[1], NA),
depth.15 = ifelse(abs(closest(Depth, 15)[1] - 15) < 0.2, closest(Depth, 15)[1], NA),
depth.17 = ifelse(abs(closest(Depth, 17)[1] - 17) < 0.2, closest(Depth, 17)[1], NA),
depth.19 = ifelse(abs(closest(Depth, 19)[1] - 19) < 0.2, closest(Depth, 19)[1], NA),
# Calculate depth deviance
depth.dev.01 = ifelse(is.na(depth.01), NA, abs(depth.01 -  1)),
depth.dev.03 = ifelse(is.na(depth.03), NA, abs(depth.03 -  3)),
depth.dev.05 = ifelse(is.na(depth.05), NA, abs(depth.05 -  5)),
depth.dev.07 = ifelse(is.na(depth.07), NA, abs(depth.07 -  7)),
depth.dev.09 = ifelse(is.na(depth.09), NA, abs(depth.09 -  9)),
depth.dev.11 = ifelse(is.na(depth.11), NA, abs(depth.11 - 11)),
depth.dev.13 = ifelse(is.na(depth.13), NA, abs(depth.13 - 13)),
depth.dev.15 = ifelse(is.na(depth.15), NA, abs(depth.15 - 15)),
depth.dev.17 = ifelse(is.na(depth.17), NA, abs(depth.17 - 17)),
depth.dev.19 = ifelse(is.na(depth.19), NA, abs(depth.19 - 19)),
# Extract the index of the original entry
id.01 = ifelse(is.na(depth.01), NA, closest.other(id, Depth,  1)[1]),
id.03 = ifelse(is.na(depth.03), NA, closest.other(id, Depth,  3)[1]),
id.05 = ifelse(is.na(depth.05), NA, closest.other(id, Depth,  5)[1]),
id.07 = ifelse(is.na(depth.07), NA, closest.other(id, Depth,  7)[1]),
id.09 = ifelse(is.na(depth.09), NA, closest.other(id, Depth,  9)[1]),
id.11 = ifelse(is.na(depth.11), NA, closest.other(id, Depth, 11)[1]),
id.13 = ifelse(is.na(depth.13), NA, closest.other(id, Depth, 13)[1]),
id.15 = ifelse(is.na(depth.15), NA, closest.other(id, Depth, 15)[1]),
id.17 = ifelse(is.na(depth.17), NA, closest.other(id, Depth, 17)[1]),
id.19 = ifelse(is.na(depth.19), NA, closest.other(id, Depth, 19)[1]),
# Extract time
datetime.01 = closest.other(Datetime, Depth,  1)[1],
datetime.03 = closest.other(Datetime, Depth,  3)[1],
datetime.05 = closest.other(Datetime, Depth,  5)[1],
datetime.07 = closest.other(Datetime, Depth,  7)[1],
datetime.09 = closest.other(Datetime, Depth,  9)[1],
datetime.11 = closest.other(Datetime, Depth, 11)[1],
datetime.13 = closest.other(Datetime, Depth, 13)[1],
datetime.15 = closest.other(Datetime, Depth, 15)[1],
datetime.17 = closest.other(Datetime, Depth, 17)[1],
datetime.19 = closest.other(Datetime, Depth, 19)[1],
# Extract temperature
temp.01 = ifelse(is.na(depth.01), NA, closest.other(Temp, Depth,  1)[1]),
temp.03 = ifelse(is.na(depth.03), NA, closest.other(Temp, Depth,  3)[1]),
temp.05 = ifelse(is.na(depth.05), NA, closest.other(Temp, Depth,  5)[1]),
temp.07 = ifelse(is.na(depth.07), NA, closest.other(Temp, Depth,  7)[1]),
temp.09 = ifelse(is.na(depth.09), NA, closest.other(Temp, Depth,  9)[1]),
temp.11 = ifelse(is.na(depth.11), NA, closest.other(Temp, Depth, 11)[1]),
temp.13 = ifelse(is.na(depth.13), NA, closest.other(Temp, Depth, 13)[1]),
temp.15 = ifelse(is.na(depth.15), NA, closest.other(Temp, Depth, 15)[1]),
temp.17 = ifelse(is.na(depth.17), NA, closest.other(Temp, Depth, 17)[1]),
temp.19 = ifelse(is.na(depth.19), NA, closest.other(Temp, Depth, 19)[1]),
### Match bouy measurements ###
# Match time
buoy.datetime.01 = closest(buoy$Datetime, datetime.01)[1],
buoy.datetime.03 = closest(buoy$Datetime, datetime.03)[1],
buoy.datetime.05 = closest(buoy$Datetime, datetime.05)[1],
buoy.datetime.07 = closest(buoy$Datetime, datetime.07)[1],
buoy.datetime.09 = closest(buoy$Datetime, datetime.09)[1],
buoy.datetime.11 = closest(buoy$Datetime, datetime.11)[1],
buoy.datetime.13 = closest(buoy$Datetime, datetime.13)[1],
buoy.datetime.15 = closest(buoy$Datetime, datetime.15)[1],
buoy.datetime.17 = closest(buoy$Datetime, datetime.17)[1],
buoy.datetime.19 = closest(buoy$Datetime, datetime.19)[1],
# Calculate time deviance in seconds
time.dev.01 = ifelse(is.na(depth.01), NA, seconds(interval(buoy.datetime.01, datetime.01))),
time.dev.03 = ifelse(is.na(depth.03), NA, seconds(interval(buoy.datetime.03, datetime.03))),
time.dev.05 = ifelse(is.na(depth.05), NA, seconds(interval(buoy.datetime.05, datetime.05))),
time.dev.07 = ifelse(is.na(depth.07), NA, seconds(interval(buoy.datetime.07, datetime.07))),
time.dev.09 = ifelse(is.na(depth.09), NA, seconds(interval(buoy.datetime.09, datetime.09))),
time.dev.11 = ifelse(is.na(depth.11), NA, seconds(interval(buoy.datetime.11, datetime.11))),
time.dev.13 = ifelse(is.na(depth.13), NA, seconds(interval(buoy.datetime.13, datetime.13))),
time.dev.15 = ifelse(is.na(depth.15), NA, seconds(interval(buoy.datetime.15, datetime.15))),
time.dev.17 = ifelse(is.na(depth.17), NA, seconds(interval(buoy.datetime.17, datetime.17))),
time.dev.19 = ifelse(is.na(depth.19), NA, seconds(interval(buoy.datetime.19, datetime.19))),
# # Match index of original entry
# buoy.index.01 = ifelse(is.na(depth.01), NA, closest.other(buoy$X, buoy$Datetime,  datetime.01)[1]),
# buoy.index.03 = ifelse(is.na(depth.03), NA, closest.other(buoy$X, buoy$Datetime,  datetime.03)[1]),
# buoy.index.05 = ifelse(is.na(depth.05), NA, closest.other(buoy$X, buoy$Datetime,  datetime.05)[1]),
# buoy.index.07 = ifelse(is.na(depth.07), NA, closest.other(buoy$X, buoy$Datetime,  datetime.07)[1]),
# buoy.index.09 = ifelse(is.na(depth.09), NA, closest.other(buoy$X, buoy$Datetime,  datetime.09)[1]),
# buoy.index.11 = ifelse(is.na(depth.11), NA, closest.other(buoy$X, buoy$Datetime,  datetime.11)[1]),
# buoy.index.13 = ifelse(is.na(depth.13), NA, closest.other(buoy$X, buoy$Datetime,  datetime.13)[1]),
# buoy.index.15 = ifelse(is.na(depth.15), NA, closest.other(buoy$X, buoy$Datetime,  datetime.15)[1]),
# buoy.index.17 = ifelse(is.na(depth.17), NA, closest.other(buoy$X, buoy$Datetime,  datetime.17)[1]),
# buoy.index.19 = ifelse(is.na(depth.19), NA, closest.other(buoy$X, buoy$Datetime,  datetime.19)[1]),
# Match temperature
buoy.temp.01 = ifelse(is.na(depth.01), NA, closest.other(buoy$X1m.T,  buoy$Datetime,  datetime.01)[1]),
buoy.temp.03 = ifelse(is.na(depth.03), NA, closest.other(buoy$X3m.T,  buoy$Datetime,  datetime.03)[1]),
buoy.temp.05 = ifelse(is.na(depth.05), NA, closest.other(buoy$X5m.T,  buoy$Datetime,  datetime.05)[1]),
buoy.temp.07 = ifelse(is.na(depth.07), NA, closest.other(buoy$X7m.T,  buoy$Datetime,  datetime.07)[1]),
buoy.temp.09 = ifelse(is.na(depth.09), NA, closest.other(buoy$X9m.T,  buoy$Datetime,  datetime.09)[1]),
buoy.temp.11 = ifelse(is.na(depth.11), NA, closest.other(buoy$X11m.T, buoy$Datetime,  datetime.11)[1]),
buoy.temp.13 = ifelse(is.na(depth.13), NA, closest.other(buoy$X13m.T, buoy$Datetime,  datetime.13)[1]),
buoy.temp.15 = ifelse(is.na(depth.15), NA, closest.other(buoy$X15m.T, buoy$Datetime,  datetime.15)[1]),
buoy.temp.17 = ifelse(is.na(depth.17), NA, closest.other(buoy$X17m.T, buoy$Datetime,  datetime.17)[1]),
buoy.temp.19 = ifelse(is.na(depth.19), NA, closest.other(buoy$X19m.T, buoy$Datetime,  datetime.19)[1]),
# Remove measurements that are more than 10 minutes apart from manual measurements
buoy.temp.01 = ifelse(abs(time.dev.01) > 600, NA, buoy.temp.01),
buoy.temp.03 = ifelse(abs(time.dev.03) > 600, NA, buoy.temp.03),
buoy.temp.05 = ifelse(abs(time.dev.05) > 600, NA, buoy.temp.05),
buoy.temp.07 = ifelse(abs(time.dev.07) > 600, NA, buoy.temp.07),
buoy.temp.09 = ifelse(abs(time.dev.09) > 600, NA, buoy.temp.09),
buoy.temp.11 = ifelse(abs(time.dev.11) > 600, NA, buoy.temp.11),
buoy.temp.13 = ifelse(abs(time.dev.13) > 600, NA, buoy.temp.13),
buoy.temp.15 = ifelse(abs(time.dev.15) > 600, NA, buoy.temp.15),
buoy.temp.17 = ifelse(abs(time.dev.17) > 600, NA, buoy.temp.17),
buoy.temp.19 = ifelse(abs(time.dev.19) > 600, NA, buoy.temp.19),
# # Remove faulty measurement from 2018-08-09
buoy.temp.01 = ifelse(as.Date(buoy.datetime.01) == '2018-08-09', NA, buoy.temp.01),
buoy.temp.03 = ifelse(as.Date(buoy.datetime.03) == '2018-08-09', NA, buoy.temp.03),
buoy.temp.05 = ifelse(as.Date(buoy.datetime.05) == '2018-08-09', NA, buoy.temp.05),
buoy.temp.07 = ifelse(as.Date(buoy.datetime.07) == '2018-08-09', NA, buoy.temp.07),
buoy.temp.09 = ifelse(as.Date(buoy.datetime.09) == '2018-08-09', NA, buoy.temp.09),
buoy.temp.11 = ifelse(as.Date(buoy.datetime.11) == '2018-08-09', NA, buoy.temp.11),
buoy.temp.13 = ifelse(as.Date(buoy.datetime.13) == '2018-08-09', NA, buoy.temp.13),
buoy.temp.15 = ifelse(as.Date(buoy.datetime.15) == '2018-08-09', NA, buoy.temp.15),
buoy.temp.17 = ifelse(as.Date(buoy.datetime.17) == '2018-08-09', NA, buoy.temp.17),
buoy.temp.19 = ifelse(as.Date(buoy.datetime.19) == '2018-08-09', NA, buoy.temp.19),
# Remove missing buoy measurements from manual measurements
temp.01 = ifelse(is.na(buoy.temp.01), NA, temp.01),
temp.03 = ifelse(is.na(buoy.temp.03), NA, temp.03),
temp.05 = ifelse(is.na(buoy.temp.05), NA, temp.05),
temp.07 = ifelse(is.na(buoy.temp.07), NA, temp.07),
temp.09 = ifelse(is.na(buoy.temp.09), NA, temp.09),
temp.11 = ifelse(is.na(buoy.temp.11), NA, temp.11),
temp.13 = ifelse(is.na(buoy.temp.13), NA, temp.13),
temp.15 = ifelse(is.na(buoy.temp.15), NA, temp.15),
temp.17 = ifelse(is.na(buoy.temp.17), NA, temp.17),
temp.19 = ifelse(is.na(buoy.temp.19), NA, temp.19),
)
summary(matched)
# Remove outlier dates
matched <- matched[!(matched$Date %in% outlier.dates),]
plot(matched$Date, matched$temp.01)
plot(matched$Date, matched$temp.03)
plot(matched$Date, matched$temp.05)
plot(matched$Date, matched$temp.07)
plot(matched$Date, matched$temp.09)
plot(matched$Date, matched$temp.11)
plot(matched$Date, matched$temp.13)
plot(matched$Date, matched$temp.15)
plot(matched$Date, matched$temp.17)
plot(matched$Date, matched$temp.19)
plot(matched$Date, matched$buoy.temp.01)
plot(matched$Date, matched$buoy.temp.03)
plot(matched$Date, matched$buoy.temp.05)
plot(matched$Date, matched$buoy.temp.07)
plot(matched$Date, matched$buoy.temp.09)
plot(matched$Date, matched$buoy.temp.11)
plot(matched$Date, matched$buoy.temp.13)
plot(matched$Date, matched$buoy.temp.15)
plot(matched$Date, matched$buoy.temp.17)
plot(matched$Date, matched$buoy.temp.19)
t.test(matched$temp.01, matched$buoy.temp.01, paired = TRUE, alternative = "two.sided")
t.test(matched$temp.01, matched$buoy.temp.01, paired = TRUE, alternative = "two.sided")
t.test(matched$temp.03, matched$buoy.temp.03, paired = TRUE, alternative = "two.sided")
t.test(matched$temp.05, matched$buoy.temp.05, paired = TRUE, alternative = "two.sided")
t.test(matched$temp.07, matched$buoy.temp.07, paired = TRUE, alternative = "two.sided")
t.test(matched$temp.09, matched$buoy.temp.09, paired = TRUE, alternative = "two.sided")
lapply(matched[c("depth.09", "temp.09", "buoy.temp.09")], mean, na.rm = TRUE)
t.test(matched$temp.11, matched$buoy.temp.11, paired = TRUE, alternative = "two.sided")
lapply(matched[c("depth.11", "temp.11", "buoy.temp.11")], mean, na.rm = TRUE)
t.test(matched$temp.13, matched$buoy.temp.13, paired = TRUE, alternative = "two.sided")
lapply(matched[c("depth.13", "temp.13", "buoy.temp.13")], mean, na.rm = TRUE)
t.test(matched$temp.15, matched$buoy.temp.15, paired = TRUE, alternative = "two.sided")
lapply(matched[c("depth.15", "temp.15", "buoy.temp.15")], mean, na.rm = TRUE)
t.test(matched$temp.17, matched$buoy.temp.17, paired = TRUE, alternative = "two.sided")
lapply(matched[c("depth.17", "temp.17", "buoy.temp.17")], mean, na.rm = TRUE)
t.test(matched$temp.19, matched$buoy.temp.19, paired = TRUE, alternative = "two.sided")
lapply(matched[c("depth.19", "temp.19", "buoy.temp.19")], mean, na.rm = TRUE)
matched.manual <- matched[c(1,42:51)]
matched.auto <- matched[c(1,72:81)]
matched2 <- cbind(gather(matched.manual, "depth", "temp.manual", 2:11),
gather(matched.auto, "depth", "temp.auto", 2:11)[3])
rm(matched.manual, matched.auto)
matched2$depth <- parse_number(matched2$depth)*100
summary(matched2)
t.test(matched2$temp.manual, matched2$temp.auto, paired = TRUE, alternative = "two.sided")
lapply(matched2[c("temp.manual", "temp.auto")], mean, na.rm = TRUE)
matched.1to7 <- matched2[matched2$depth<=7,]
matched.9to19 <-  matched2[matched2$depth>7,]
t.test(matched.1to7$temp.manual, matched.1to7$temp.auto, paired = TRUE, alternative = "two.sided")
lapply(matched.1to7[c("temp.manual", "temp.auto")], mean, na.rm = TRUE)
t.test(matched.9to19$temp.manual, matched.9to19$temp.auto, paired = TRUE, alternative = "two.sided")
lapply(matched.9to19[c("temp.manual", "temp.auto")], mean, na.rm = TRUE)
?t-test
?t.test
# T-test for 9-19 (bias corrected)
t.test(final.manual.9to19$Temp-0.86, final.automatic.9to19$Temp)
mean(final.manual.9to19$Temp-0.86); mean(final.automatic.9to19$Temp, na.rm = TRUE)
mean(final.manual.9to19$Temp-0.86) - mean(final.automatic.9to19$Temp, na.rm = TRUE)
t.test(final.manual.9to19$Temp-0.86, final.automatic.9to19$Temp, alternative = "greater")
t.test(matched$temp.19, matched$buoy.temp.19, paired = TRUE, alternative = "two.sided")
t.test(matched$temp.09, matched$buoy.temp.09, paired = TRUE, alternative = "two.sided")
t.test(matched.1to7$temp.manual, matched.1to7$temp.auto, paired = TRUE, alternative = "two.sided")
lapply(matched.1to7[c("temp.manual", "temp.auto")], mean, na.rm = TRUE)
t.test(matched.9to19$temp.manual, matched.9to19$temp.auto, paired = TRUE, alternative = "two.sided")
lapply(matched.9to19[c("temp.manual", "temp.auto")], mean, na.rm = TRUE)
